var _cad0f5a3fd254d17869338d64b41abdf = '<el-form :size="size" :label-width="labelwidth+\'px\'" :model="data" ref="customForm"><el-row v-for="row in rows"><el-col v-for="item in row" v-if="!item.hide" :span="parseInt(22/row.length)"><div class="grid-content bg-purple"><auto-property v-model="item.value" :item="item" @valuechange="valueChange"></auto-property></div></el-col></el-row>'; Vue.component("auto-form", { props: ["info", "value", "size", "url"], data() { return { rows: [], data: { items: [] }, labelwidth: this.info && this.info.labelwidth ? this.info.labelwidth : 120, dataUrl: this.url } }, model: { prop: "value", event: "change" }, methods: { init(e) { this.data.items = [], this.rows = []; var t = []; for (i = 0; i < e.length; i++) { var l = e[i]; "checkbox" != l.type || l.value || (l.value = []), l.index = i, this.data.items.push(l), t.push(l), 1 == l.eof && (this.rows.push(t), t = []) } t.length > 0 && this.rows.push(t), this.$refs.customForm.clearValidate() }, getField(e) { var t; return this.data.items.forEach(i => { e.toLowerCase() == i.name.toLowerCase() && (t = i) }), t }, valueChange(e) { this.$emit("change", this.getData()), this.init(this.data.items); var t = null; this.$refs.customForm.validate(e => { t = e }), this.$emit("fieldchange", { item: e, properties: this.data.items, valid: t }) }, success() { var e = null; return this.$refs.customForm.validate(t => { e = t }), e }, getData() { var e = new Object; for (i = 0; i < this.data.items.length; i++)this.data.items[i].hide || this.getProperty(e, this.data.items[i]); return e }, setData(e) { if (e) for (i = 0; i < this.data.items.length; i++)this.setProperty(e, this.data.items[i]) }, setProperty(e, t) { var i = e; t.parent && e && e[t.parent] && (i = e[t.parent]), "checkbox" != t.type || i ? i[t.name] && (t.value = i[t.name]) : t.value = [], t.setValue && t.setValue(t.value) }, getProperty(e, t) { t.parent ? (e[t.parent] || (e[t.parent] = new Object), e[t.parent][t.name] = t.value) : e[t.name] = t.value }, loadData(e) { if (e && beetlex) { var t = new beetlexAction("/__apidoc/GetApiDetail"); t.requested = (e => { this.column = e.col, this.labelwidth = e.labelwidth, this.init(e.items), this.setData(this.value), this.$emit("change", this.getData()), this.$emit("completed", e.items) }), t.get({ url: e }) } } }, mounted() { this.info && this.init(this.info.items), this.setData(this.model), this.loadData(this.dataUrl) }, watch: { info(e) { e.labelwidth ? this.labelwidth = e.labelwidth : this.labelwidth = 120, this.init(e.items) }, value(e) { this.setData(e) }, url(e) { this.dataUrl = e, this.loadData(this.dataUrl) } }, template: _cad0f5a3fd254d17869338d64b41abdf }); var _2b525ca1566d46028e0d254b53f2274a = '<div :style="{height:gridHeight+\'px\'}"><el-table :data="gridData"style="width: 100%;"@selection-change="selectionChange" :size="gridSize" :max-height="gridHeight"><el-table-column v-if="gridSelection" type="selection"width="55"></el-table-column><el-table-column v-for="col in gridColumns":label="col.label?col.label:col.name":width="getWidth(col)"><template slot-scope="item"><div v-if="gridEdit && !col.readonly && item.row._editor==true"><el-input-number v-if="col.type==\'number\'" v-model="item.row[col.name]" :min="-9999999" :max="9999999" style="width: 100%;" :size="gridSize"></el-input-number><el-link v-else-if="col.type==\'link\'" type="primary" @click="onCommand(item.row,col.name)">{{item.row[col.name]}}</el-link><el-date-picker v-else-if="col.type==\'date\'" v-model="item.row[col.name]"align="left"type="date" style="width: 100%;" :size="gridSize"></el-date-picker><el-time-picker v-else-if="col.type==\'time\'" v-model="item.row[col.name]" style="width: 100%;" :size="gridSize"></el-time-picker><el-select v-else-if="col.type==\'select\'" v-model="item.row[col.name]" style="width: 100%;" :size="gridSize"><el-option v-if="col.data && col.nulloption==true">无选择</el-option><el-option v-if="col.data" v-for="sitem in col.data" :label="sitem.label?sitem.label:sitem.value" :value="sitem.value"></el-option></el-select><el-radio-group v-else-if="col.type==\'radio\'" v-model="item.row[col.name]" :size="gridSize"><el-radio v-if="col.data" v-for="sitem in col.data" :label="sitem.value">{{sitem.label?sitem.label:sitem.value}}</el-radio></el-radio-group><el-checkbox-group v-else-if="col.type==\'checkbox\'" v-model="item.row[col.name]" :size="gridSize"><el-checkbox v-if="col.data" v-for="sitem in col.data" :label="sitem.value">{{sitem.label?sitem.label:sitem.value}}</el-checkbox></el-checkbox-group><el-switch v-else-if="col.type==\'switch\'" v-model="item.row[col.name]" :size="gridSize"></el-switch><el-input v-else-if="col.type==\'remark\'" v-model="item.row[col.name]" type="textarea" :row="col.row?col.row:3" :size="gridSize"></el-input><el-input v-else v-model="item.row[col.name]" :size="gridSize"></el-input></div><div v-else><el-link v-if="col.type==\'link\'" type="primary" @click="onCommand(item.row,col.name)">{{item.row[col.name]}}</el-link><span v-else> {{getViewValue(item.row[col.name],col.data)}}</span></div></template></el-table-column><el-table-column v-if="gridDelete||gridEdit" width="100" align="right"><template slot-scope="item"><el-button v-if="item.row._editor==false" type="primary" :size="gridSize" icon="el-icon-edit" circle @click="onEdit(item.row)"></el-button><el-button v-if="item.row._editor==true" type="success" :size="gridSize" icon="el-icon-check" circle @click="onItemChange(item.row)"></el-button><el-button v-if="gridDelete" :size="gridSize" type="danger" icon="el-icon-delete" circle @click="onItemDelete(item.row)"></el-button></template></el-table-column></el-table><el-pagination style="float:right;" v-if="gridPages>1" layout="prev, pager, next" @current-change="onCurrentChange":page-size="1":total="gridPages" :current-page="gridCurrentpage"></el-pagination>'; Vue.component("auto-grid", { props: ["columns", "height", "data", "selection", "delete", "edit", "size", "pages", "currentpage", "url"], data() { return { gridColumns: this.columns ? this.columns : [], gridData: [], gridHeight: this.height ? this.height : 300, gridSelection: this.selection, gridDelete: this.delete, gridEdit: this.edit, gridSize: this.size, gridPages: this.pages ? this.pages : 0, gridCurrentpage: this.currentpage ? currentpage + 1 : 1, gridColumnsUrl: this.url } }, methods: { getColumn(e) { var t; return this.gridColumns.forEach(i => { e.toLowerCase() == i.name.toLowerCase() && (t = i) }), t }, onCommand(e, t) { this.$emit("command", { data: e, field: t }) }, getWidth: e => e.width ? e.width : "", getViewValue(e, t) { var i = e; return t && t.forEach(t => { t.value != e || (i = t.label ? t.label : t.value) }), i }, selectionChange(e) { this.$emit("selectchange", e) }, onItemDelete(e) { var t = { data: e, success: () => { this.gridData.splice(e._id, 1), this.onRefresh() } }; this.$emit("itemdelete", t) }, onItemChange(e) { var t = { data: e, success: () => { e._editor = !1, this.onRefresh() } }; this.$emit("itemchange", t) }, onEdit(e) { this.gridData.forEach(t => { t == e && (t._editor = !0) }), this.onRefresh() }, onRefresh() { for (this.gridData.push({}), this.gridData.splice(this.gridData.length - 1, 1), i = 0; i < this.gridData.length; i++)this.gridData[i]._id = i; this.gridHeight = this.height ? this.height : 300 }, onCurrentChange(e) { this.$emit("pagechange", e - 1) }, loadData(e) { if (e && beetlex) { var t = new beetlexAction("/__apidoc/GetGridDetail"); t.requested = (e => { this.gridColumns = e, this.loadColumnsUrlData(), this.$emit("completed", e) }), t.get({ url: e }) } }, loadColumnsUrlData() { this.gridColumns && this.gridColumns.forEach(e => { e.dataurl && this.loadColumnData(e) }) }, loadColumnData(e) { if (e.dataurl && beetlex) { var t = new beetlexAction(e.dataurl); t.requested = (t => { e.data = t }), t.get() } } }, mounted() { this.gridData = [], this.data && (this.data.forEach(e => { e._editor = !1, this.gridData.push(e) }), this.onRefresh()), this.selectionChange([]), this.loadData(this.gridColumnsUrl), this.loadColumnsUrlData() }, watch: { pages(e) { this.gridPages = e || 0 }, currentpage(e) { this.gridCurrentpage = e ? e + 1 : 1 }, columnsurl(e) { this.gridColumnsUrl = e, this.loadData(this.gridColumnsUrl) }, columns(e) { this.gridColumns = e || [], this.loadColumnsUrlData() }, data(e) { this.gridData = [], e && (e.forEach(e => { e._editor = !1, this.gridData.push(e) }), this.onRefresh()), this.selectionChange([]) } }, template: _2b525ca1566d46028e0d254b53f2274a }); var _2c6fa504768c48768e70f1e4e5e62553 = '<div><el-form-item v-if="info.enabled==false" :label="info.label?info.label:info.name"><el-input :value="model.value":disabled="true"></el-input></el-form-item><el-form-item v-else-if="info.type==\'number\'" :label="info.label?info.label:info.name" :prop="\'items.\'+info.index+\'.value\'" :rules="rules"><el-input-number v-model="model.value" :min="-9999999" :max="9999999" style="width: 100%;" @change="updateValue"></el-input-number></el-form-item><el-form-item v-else-if="info.type==\'date\'" :label="info.label?info.label:info.name" :prop="\'items.\'+info.index+\'.value\'" :rules="rules"><el-date-picker v-model="model.value"align="left"type="date" style="width: 100%;" @change="updateValue"></el-date-picker></el-form-item><el-form-item v-else-if="info.type==\'time\'" :label="info.label?info.label:info.name" :prop="\'items.\'+info.index+\'.value\'" :rules="rules"><el-time-picker v-model="model.value" style="width: 100%;" @change="updateValue"></el-time-picker></el-form-item><el-form-item v-else-if="info.type==\'select\'" :label="info.label?info.label:info.name" :prop="\'items.\'+info.index+\'.value\'" :rules="rules"><el-select v-model="model.value" style="width: 100%;" @change="updateValue"><el-option v-if="item.data && item.nulloption==true">无选择</el-option><el-option v-if="item.data" v-for="sitem in info.data" :label="sitem.label?sitem.label:sitem.value" :value="sitem.value"></el-option></el-select></el-form-item><el-form-item v-else-if="info.type==\'radio\'" :label="info.label?info.label:info.name" :prop="\'items.\'+info.index+\'.value\'" :rules="rules"><el-radio-group v-model="model.value" @change="updateValue"><el-radio v-if="info.data" v-for="sitem in info.data" :label="sitem.value">{{sitem.label?sitem.label:sitem.value}}</el-radio></el-radio-group></el-form-item><el-form-item v-else-if="info.type==\'checkbox\'" :label="info.label?info.label:info.namel" :prop="\'items.\'+info.index+\'.value\'" :rules="rules"><el-checkbox-group v-model="model.value" @change="updateValue"><el-checkbox v-if="info.data" v-for="sitem in info.data" :label="sitem.value">{{sitem.label?sitem.label:sitem.value}}</el-checkbox></el-checkbox-group></el-form-item><el-form-item v-else-if="info.type==\'switch\'" :label="info.label?info.label:info.name" :prop="\'items.\'+info.index+\'.value\'" :rules="rules"><el-switch v-model="model.value" @change="updateValue"></el-switch></el-form-item><el-form-item v-else-if="info.type==\'password\'" :label="info.label?info.label:info.name" :prop="\'items.\'+info.index+\'.value\'" :rules="rules"><el-input v-model="model.value" show-password @change="updateValue"></el-input></el-form-item><el-form-item v-else-if="info.type==\'remark\'" :label="info.label?info.label:info.name" :prop="\'items.\'+info.index+\'.value\'" :rules="rules"><el-input v-model="model.value" type="textarea" @change="updateValue" :rows="info.row?info.row:3"></el-input></el-form-item><el-form-item v-else :label="info.label?info.label:info.name" :prop="\'items.\'+info.index+\'.value\'" :rules="rules"><el-input v-model="model.value" @change="updateValue"></el-input></el-form-item>'; Vue.component("auto-property", { props: ["item", "value"], model: { prop: "value", event: "change" }, data() { return { model: { value: this.value }, info: this.item, rules: [] } }, methods: { updateValue() { this.$emit("change", this.model.value), this.info.value = this.model.value, this.$emit("valuechange", this.info) }, loadData() { if (this.info.dataurl) { var e = new beetlexAction(this.info.dataurl); e.requested = (e => { this.info.data = e }), e.get() } }, setValue(e) { this.model.value = e } }, mounted() { this.loadData(), this.info.rules && (this.rules = this.info.rules), this.info.setValue = this.setValue }, watch: { item(e) { this.info = e, this.model.value = e.value, this.info.rules && (this.rules = this.info.rules), this.loadData(), this.info.setValue = this.setValue } }, template: _2c6fa504768c48768e70f1e4e5e62553 });